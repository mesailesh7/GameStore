// Route definitions for both new game and edit existing game
@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer

// Dependency injection for navigation and client services
@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

// Dynamic page title based on operation (New/Edit)
<PageTitle>@title</PageTitle>
<h3>@title</h3>

// Loading state handler
@if (genres is null || game is null)
{
    <p><em>Loading..</em></p>
}
else
{
    // Main form layout using Bootstrap grid
    <div class="row">
        <div class="col-md-4">
            // EditForm component with model binding and validation
            <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                // Game Name input field
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText class="form-control" id="name" @bind-Value="@game.Name"/>
                    <ValidationMessage For="@(() => game.Name)" />
                </div>

                // Genre dropdown selection
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect class="form-select" id="genre" @bind-Value="@game.GenreId">
                        <option value="">Select a Genre</option>
                        @foreach (var genre in genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => game.GenreId)" />
                </div>

                // Price input field
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber class="form-control" id="price" @bind-Value="@game.Price"/>
                    <ValidationMessage For="@(() => game.Price)" />
                </div>

                // Release Date picker
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date:</label>
                    <InputDate class="form-control" id="releaseDate" @bind-Value="@game.ReleaseDate"/>
                </div>

                // Form buttons
                <button type="submit" class="btn btn-primary">Submit</button>
                <a class="btn btn-secondary" href="/" role="button">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    // Route parameter for game ID (nullable for new game creation)
    [Parameter]
    public int? Id { get; set; }

    // Form model binding with SupplyParameterFromForm attribute
    [SupplyParameterFromForm]
    private GameDetails? game { get; set; }

    // Store list of available genres
    private Genre[]? genres;    

    // Page title (New Game/Edit Game)
    private string title = string.Empty;

    // Lifecycle method for parameter initialization
    protected override void OnParametersSet()
    {
        // Skip if game is already initialized
        if (game is not null)
        {
            return;
        }

        // Edit existing game
        if (Id is not null)
        {
            game = GamesClient.GetGame(Id.Value);
            title = $"Edit {game.Name}";
        }
        // New game creation
        else
        {
            game = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow),
            };
            title = "New Game";
        }
    }

    // Lifecycle method for component initialization
    protected override void OnInitialized()
    {
        // Load genres for dropdown
        genres = GenresClient.GetGenres();
    }

    // Form submission handler
    private void HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(game);

        // Add new game or update existing game
        if(Id is null)
        {
            GamesClient.AddGame(game);
        }
        else
        {
            game.Id = Id.Value;
            GamesClient.UpdateGame(game);
        }

        // Navigate back to home page
        NavigationManager.NavigateTo("/");
    }
}
